[Javascript]

1. 자바스크립트
	HTML : 브라우저에 표시할 내용 나열
	CSS : HTML 요소에 디자인 접목
	Javascript : 정적인 웹 문서에 동작을 부여 ( 동적 효과 부여 )
		-> 웹에서는 일반적으로 HTML 과 함께 사용되는 언어
		    웹브라우저에서 사용할 수 있는 프로그래밍 언어
	
	1) 객체 기반의 스크립트 프로그래밍 언어
	  웹브라우저 내에서 많이 사용, 다른 응용프로그램의 내장 객체에도 접근 가능한 기능있음.
	  웹 브라우저에는 javascript 엔진(번역해서 실행시켜주는 역할)이 탑재되어있다.
	  브라우저가 아닌 환경에서 실행시키고 싶으면 엔진을 설치해야함.
	  (Node.js 검색 > 안전성과 신뢰성 있는 엔진 버전을 다운받아 설치)


2. 기본사항

	1) 작성 방법
		- HTML 문서안에 <script> 태그안에 작성
		- 확장자 .js 파일에 js 코드 작성하고 HTML문서에 연결.
			<script src="js파일경로"></script>	(유지보수를 위해 추천)

	2) 주석 
		//  한 줄주석
		/*  여러줄 주석  */
		
3. 변수 
	int num = 10; 	(JAVA)
	var num = 10; 	(Javascript)

	* ES6 버전부터 바뀐 : let, const(상수)
	
4. 데이터 타입
	: 값의 종류들 
		
	1) 숫자형 Number
		정수 : 	10진수
			16진수 0x로 시작, 0~9 A~F (주로 색상값 나타낼때 사용)
		실수 :	소수점 있는 수
	2) 문자형 String	
		문자열을 홀/겹따옴표로 묶은 형태

	3) 논리형 Boolean
		true / false 두가지 경우의 값을 갖는 형태

	4) undefined
		: 변수를 선언만하고 , 초기화 하지 않는 것 출력
		  함수 인자값 없이 호출되는 경우
		  존재하지 않는 속성을 접근한 경우

5. 연산자
	1) 산술	: + - * / %
	2) 대입	: =
	3) 복합대입 : += -= *= /= %=
	4) 증감	: ++ -- (전위형, 후위형)
	5) 비교	: < <= > >=
		==	: 데이터의 타입 관계없이 같으면 true 10 == "10" true
		===	: 데이터 타입도 일치해야 true 10 === "10" false
		!=	: 데이터의 타입 관계없이 같으면 false
		!==	: 데이터 타입도 일치해야 false
	6) 논리 : || && !
	7) 삼항 : ? :

6. 형변환
	: 데이터 타입을 변환시키는 작업

	# 자동형변환
	1) 숫자 + 문자 = 문자
	2) 불린 + 문자 = 문자
	3) 불린 + 숫자 = 숫자 	( true=1, false=0 )

		* 숫자 -> 문자 : 10+"" -> "10"

	# 강제형변환
	1) 문자 -> 숫자
		정수 : parseInt()
			Number()
		실수 : parseFloat()
			Number()
	2) 숫자 -> 문자 
		일반 문자 : String()
		16진수 : .toString(진수)
		실수문자 : .toFixed(소수점자리수)


7. 입력문 
	: 입력창을 통해서 사용자로부터 데이터를 입력받는 기능

	변수 = prompt("질문");
	변수 = prompt("질문","default답변");

	입력받은 값은 모두 문자타입으로 받아옴.


8. 제어문
	- 조건문 : if, switch
	- 반복문 : while, for,do while
	- 보조제어문: continue,break

9. 배열 array
	: 다양한 데이터 타입의 값 저장 가능
	
	1) 배열 생성 
		#1. 배열 객체 생성 
			var 참조변수명 = new Array();

			변수명[0] = 값;

		#2. 배열 객체 생성 + 초기값
			var 참조변수명 = new Array(값1, 값2, 값3, ......);

		#3. 배열 리터럴 생성 
			var 참조변수명 =[];		// 빈 배열
			var 참조변수명 = [값1, 값2, 값3, .....];


10. 함수
	1) 함수 function
		특정 기능을 하는 코드들을 묶어서 독립된 부품으로 만들어 
		재사용하고자 할때 호출하여 사용하는 기능

	2) 구조
		#정의 
		function 함수명 () {
			//실행할 코드들........
		}

		# 정의 (매개변수O , 리턴O)
		function 함수명(변수명, 변수명 , .....){
			// 실행코드들 ....
			return 값;
		}
		변수 = 함수명 (인자 , 인자 , .....);

	3) 스코프 
		: 변수또는 함수의 유효범위를 말함

		#1. 전역 변수 Global Variable
			선언위치 : 함수밖 {}밖
			사용범위 : 자바스크립트 전체 영역			

		#2. 지역 변수  Local Varialbe
			선언위치 : 함수 안
			사용범위 : 함수 안

		* 함수 내에서 동일 이름의 변수에 대한 우선 순위 : 지역> 전역

		#3. 전역 함수
			전역 변수와 동일
		#4. 지역함수 
			정의 위치 : 함수안 
			사용 범위 : 정의된 함수를 품고있는 함수만

	4) 변수에 함수 저장하기
		: 자바스크립트에서는 함수도 변수에 저장가능.
		변수에 함수를 저장하면 변수이름을 함수처럼 사용할 수 있다.

		var 변수명 = 함수명;
		->변수명();

	5) 매개변수 값으로 함수 사용하기
		: 매개변수도 변수이기 때문에 함수를 담을 수 있다.

	6) 리턴값으로 함수 사용하기
		: 함수는 어떤 값이든 리턴 가능.  즉 함수를 리턴할 수 있다.

11. 함수리터럴과 익명 함수
	1) 리터럴
		: 자바스크립트에서 데이터를 만드는 방법은 크게 두가지로,
		리터럴 방식과 객체 방식 두가지가 있다.

		타입	리터럴 방식 	객체
		-------------------------------------------------------------------
		숫자	var num =10;	var num = new Number(10);
		문자 	var name = "abc"	var name = new String ("abc");
		불린	var play = true;	var play = new Boolean (true);
		배열 	var arr = [1,2,3];	var arr = new Array(1,2,3);
		-------------------------------------------------------------------

	2) 함수 리터럴
		: 함수 이름을 주지않고 만들면 된다.
		
		#1. 일반적인 방법
			function hello (name){
				.........
			}

		#2. 리터럴
			var hello = function (name){
				.........
			}

		#3. 객체 방식 
			var hello = new Function("name"," 실행할 명령문들.... ");

	3) 익명 함수
		: 리터럴 방식의 함수를 익명함수라 한다.
		호이스팅 불가능
		일반함수 : 재사용 많이 할 경우
		익명함수 : 재사용 비중이 적거나 , 값처럼 정의해서 넘겨줘야할 경우
				
12.  자바스크립트 변수 선언 방식 
	: 변수 선언 방식에는 var / let / const 와 같이 3가지로 선언 가능 (ES6부터 가능)
		-> 변수 이름 충돌로 인하여.....

	ECMAScript ES6 = ECMAScript 표준의 6번째 에디션(2015)

	[  유효범위  ]
	* 블록스코프 : { } if, for, function (중괄호 안이냐 밖이냐)
	* 함수스코프 : 블록스코프 중 함수 범위를 갖는 스코프 (함수 안이냐 밖이냐)

	1) var	: 함수 스코프 : 같은 이름의 변수 재선언 가능. 값수정 가능 (문제점 유발 가능성 높음)
	2) let	: 블록 스코프 : 같은 이름의 변수 재선언 불가능. 값수정 가능 ( 일반 우리가 아는 변수)
	3) const 	: 블록 스코프 : 같은 이름의 변수 재선언 불가능. 값수정 불가능. -> 상수
				const는 선언과 동시에 값을 할당 해야함. 아니면 에러!!

13. 자바스크립트 객체
	: property 와 method로 이루어짐
	property : 프로퍼티(key) 와 프로퍼티(value) 로 구성
		프로퍼티(key)는 일반적으로 문자로 구성하고 값은 원하는 값
	method : 객체 안에 있는 함수를 가르킴

	HTML태그 - 속성(attribute)과 속성값을 가진다.
	CSS - 프로퍼티와 프로퍼티 값으로 이루어짐
	JS- 프로퍼티와 값, 그리고 메서드로 이루어짐

	1) 사용자 객체
		JS 객체 생서 방법 
		#1. 객체 리터럴 방식 : JS 객체 구분 기호 : { } 
			const 변수 = {
				프로퍼티명 : 값,
				프로퍼티명 : 값, ......
			};

			보통 객체 생성시, (문법은 아님)
			객체 자체의 주소값이 바뀌어야 하면 let으로 변수에 담고
			객체 자체의 주소값은 안바뀌고 안에만 바꾼다면 const 변수에 주로 담는다.

		#2. new Object() 로 생성하는 방식
			const 변수 = new Object();
			변수.age = 10;
			변수.name = "hello";

		#3. 생성자 함수로 생성하는 방식
			# 생성자 정의
			function 생성자명() {	// 생성자명은 첫글자 대문자로
				..........
			}

			# 객체 생성
			const 변수 = new 생성자명();
			변수.~~~

		#4. ES6 와 클래스
		
			class 클래스명 {		// 클래스명 첫글자 대문자로
				constructor(){	// 생성자
					......
				}
			}

			const 변수 = new 클래스명();


	2) 내장객체 
		자바스크립트 엔지에 내장. 바로 생성해서 사용가능.
		문자(String), 날짜(Date), 배열(Array), 수학(Math), 객체 등이 있다.
	
	3) 브라우저 객체 모델 (BOM, Browser Object Medel)
		브라우저의 계층 구조로 내장되어있는 객체를 말함.
		window, screen, location, history, navigator 객체 등이 있다.

	4) 문서 객체 모델 ( DOM, Document Object Model)
		HTML 문서 구조를 말함
		최상위 객체는 <html>, 그 하위로 <head><body>

	유용한 사이트: Mozilla developer javascript => Reference
			w3s school => References => javascript	 Reference


14. 내장 객체 (Built-in Object)
	
	1) 객체 생성 
		
		변수명 = new 생성함수();
	
	2) Date 객체 
		: 날짜나 시간 관련 정보 필요할 때 사용

		#1. 객체생성
		변수 = new Date();
		변수 = new Date( "연/월/일" );
		변수 = new Date( 연, 월-1[ ,일, 시간, 분, 초, 밀리초 ]);

		#2. 메서드

		# 정보 가져오기
		getFullYear()	: 연도 정보
		getMonth()	: 월 정보 (0~11)
		getDate()		: 일 정보
		getDay()		: 요일 (일:0 ~ 토:6)
		getHour()		: 시간정보
		getMinutes()	: 분
		getSeconds()	: 초
		getMilliseconds()	: 밀리초
		getTime()		: 1970.1.1.0.0.0 부터 경과한 시간을 밀리초로 리턴

		# 정보 수정
		setFullYear()	: 연도 수정
		setMonth()	: 월 수정 (0~11)
		setDate()		: 일 수정
		-		: 요일은 날짜 바꾸면 자동으로 바뀜
		setHour()		: 시간 수정
		setMinutes()	: 분 수정
		setSeconds()	: 초 수정
		setMilliseconds()	: 밀리초 수정
		setTime()		: 1970.1.1.0.0.0 부터 경과한 시간을 밀리초로 수정

	3) Math 객체
		수학 관련 기능과 속성을 제공하는 객체 
		
		Math.상수
		Math.메서드()

	4) Array 객체 : 위 내용과 동일
	5) String 객체
		: 문자형 데이터를 취급하는 객체

		변수  = "문자열" ;  변수 = '문자열' ;
		변수 = new String("문자열");
	
15. 브라우저 객체 모델 (BOM, Browser Object Medel)
	: 브라우저에 내장된 객체가 계층적 구조로 이루어져있는 것을 말함.

		        window
			|
		--------------------------------------------
		|	|	|	|	|
	      document	screen	location	history	navigator

	1) window 객체
		
		# 메서드
		open("URL","새창 이름","새창 옵션든")	: 팝업창
			* 옵션들 *
			width : 창 너비
			height : 창 높이
			left : 창 x축 좌표
			top : 창의 y축 좌표
			scrollbars : 스크롤바 숨김/노출 설정. no/yes
			location : url 주소 입력하는 영역 숨김/노출 설정.
			status : 상태 표시줄 영역 숨김/노출 설정
			toolbars : 도구 상자 영역 숨김/노출 설정


		alert (data)			: 경고창 data 보여주기
		confirm("질문")			: 질문 확인/취소. 확인 : true 리턴, 취소 : false 리턴
		prompt("질문", "기본답변")		: 입력창 (입력문)
		moveTo(x, y)			: 지정한 새창의 위치를 이동
		resizeTo(width, height)		: 창 크기 변경
		setInterval ( function(){....} , 시간간격)	: 지속적으로 지정한 시간간격을 두고 함수 실행
		clearInterval()			: 인터벌 삭제
		setTimeout (function(){....}, 시간간격)	: 지정한 시간 이후 함수 한번 실행
		clearTimeout()			: 타임아웃 삭제

	2) screen 객체
		: 사용자의 모니터 정보를 제공하는 객체

		screen.속성;

		width 		: 화면 너비값 리턴
		height 		: 화면 높이값 리턴
		availWidth	  	: 작업표시줄 제외한 화면 너비값
		availHeight 	: 작업표시줄 제외한 화면 높이값
		colorDepth	: 사용자 모니터가 표현가능한 컬러bit 리턴

	3) location 객체
		(브라우저 주소창과 관련)

		# 속성과 메서드
	location.	href	: 주소 영역의 주소를 설정하거나 리턴
		hostname	: url의 호스트이름을 설정하거나 리턴
		host 	: url의 호스트이름과 포트번호를 리턴
		protocal	: 프로토콜 리턴
		search	: url의 쿼리스트링 리턴 ( 쿼리스트링 = 주소의 ? 뒷부분 )
		reload()	: 브라우저 새로고침


	4) history 객체
		 : 브라우저에서 뒤로가기 앞으로가기 기능을 코드로 실행시키는 기능 제공

		# 속성과 메서드 

		back()		: 뒤로가기
		forward()		: 앞으로 가기
		go(이동숫자)	: 이동 숫자를 -2로 입력하면 두단계이전 페이지로 이동
				양수로 입력하면 앞으로가기 바로 이동

		
	5) navigator 객체
		: 현재 사용자의 브라우저 정보와 운영체제 정보를 제공

		# 속성
		appVersion	: 사용자 브라우저 버전 정보 리턴
		language		: 사용자 브라우저가 사용하는 언어. 한글 'ko'
		product		: 사용자 브라우저의 엔진 이름.
		platform		: 사용자 컴퓨터 운영체제 정보 제공
		onLine		: 사용자 온라인 상태 여부 제공
		userAgent	: 사용자 브라우저와 운영체제의 종합 정보 제공

		Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 
		------------ -------------------------------- --------------------------------------------
		    (1)			(2)			(3)

		Chrome/102.0.0.0 Safari/537.36
		------------------  --------------
			(4)	  (5)
	
		(1) 기본 플랫폼
		(2) 운영체제 정보
		(3) 사용중인 브라우저 엔진 이름
		(4) 사용중인 브라우저 이름
		(5) 같은 엔진을 사용중이며 호환 가능한 다른 브라우저	


16.  문서 객체 모델 (DOM, Document Object Medel) : DOM 트리

	문서 노드		: 전체 문서를 가르키는 Documnet 객체
	HTML 요소 노드	: HTML 요소를 가르키는 객체
	텍스트 노드	: 텍스트를 가르키는 객체

			Document
			    |
			html
			head	body
		title	meta	h1	p	img	table.........
				일반 텍스트
		

	# 노드 객체 가져오는 메서드
	document.getElementById(id값)		: id 속성값으로 노드 가져오기
	document.getElementsByTagName(name)	: 태그명으로 노드 찾기 (배열로 리턴)
	document.getElementsByClassName(name)	: class 속성값으로 노드 가져오기 (배열로 리턴)
	document.querySelector (css 선택자)		: css선택자로 노드 찾기 (첫번째 찾은 요소만 리턴)
	document.querySelectorAll (css 선택자)		: css선택자로 노드 찾기 (모든요소 배열로 리턴)

						<h1>hello</h1>
	# 찾은 HTML 요소 확인/수정
	요소.innerText  = '대치할 새로운 텍스트' 	: 요소 안의 내용 확인/수정 (태그 미포함)
	요소.innerHTML = '새로운 html 내용' 		: 요소 안의 내용 확인/수정 (태그 포함)
	요소.attribute = 새값			: 요소의 속성값 수정
	요소.setAttribute(속성명, 값)			: 요소의 속성값 메서드로 설정

	# HTML 요소 생성/추가
	document.createElement(태그명)	: HTML 태그 생성
	document.appendChild(요소)		: 요소 추가하기



17. 이벤트 등록
	1) 이벤트 등록 방법
		addEventListener() 를 이용하여 요소에 이벤트 등록

		타겟.addEventListener("이벤트종류" , function(){ ..... })
			

	2 )이벤트 종류
	load 		: 로딩이 완료 되었을 때
	resize		: 윈도우창 크기 변경되었을 때

	keydown		: 키보드를 눌렀을 때
	keyup		: 키보드를 떼었을 때
	
	change		:
	click		: 클릭했을 때
	focus		: 초점이 맞춰졌을 때
	mousedown	: 마우스 버튼을 눌렀을 때
	mouseup		: 마우스 버튼을 떼었을 때
	mouseover	: 마우스가 요소에 이동했을 때
	mouseout		: 마우스가 바깥으로 나갔을 때
	mousemove	: 마우스가 움직일 때
	

