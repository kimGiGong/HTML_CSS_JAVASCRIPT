[Javascript]

1. 자바스크립트
	HTML : 브라우저에 표시할 내용 나열
	CSS : HTML 요소에 디자인 접목
	Javascript : 정적인 웹 문서에 동작을 부여 ( 동적 효과 부여 )
		-> 웹에서는 일반적으로 HTML 과 함께 사용되는 언어
		    웹브라우저에서 사용할 수 있는 프로그래밍 언어
	
	1) 객체 기반의 스크립트 프로그래밍 언어
	  웹브라우저 내에서 많이 사용, 다른 응용프로그램의 내장 객체에도 접근 가능한 기능있음.
	  웹 브라우저에는 javascript 엔진(번역해서 실행시켜주는 역할)이 탑재되어있다.
	  브라우저가 아닌 환경에서 실행시키고 싶으면 엔진을 설치해야함.
	  (Node.js 검색 > 안전성과 신뢰성 있는 엔진 버전을 다운받아 설치)


2. 기본사항

	1) 작성 방법
		- HTML 문서안에 <script> 태그안에 작성
		- 확장자 .js 파일에 js 코드 작성하고 HTML문서에 연결.
			<script src="js파일경로"></script>	(유지보수를 위해 추천)

	2) 주석 
		//  한 줄주석
		/*  여러줄 주석  */
		
3. 변수 
	int num = 10; 	(JAVA)
	var num = 10; 	(Javascript)

	* ES6 버전부터 바뀐 : let, const(상수)
	
4. 데이터 타입
	: 값의 종류들 
		
	1) 숫자형 Number
		정수 : 	10진수
			16진수 0x로 시작, 0~9 A~F (주로 색상값 나타낼때 사용)
		실수 :	소수점 있는 수
	2) 문자형 String	
		문자열을 홀/겹따옴표로 묶은 형태

	3) 논리형 Boolean
		true / false 두가지 경우의 값을 갖는 형태

	4) undefined
		: 변수를 선언만하고 , 초기화 하지 않는 것 출력
		  함수 인자값 없이 호출되는 경우
		  존재하지 않는 속성을 접근한 경우

5. 연산자
	1) 산술	: + - * / %
	2) 대입	: =
	3) 복합대입 : += -= *= /= %=
	4) 증감	: ++ -- (전위형, 후위형)
	5) 비교	: < <= > >=
		==	: 데이터의 타입 관계없이 같으면 true 10 == "10" true
		===	: 데이터 타입도 일치해야 true 10 === "10" false
		!=	: 데이터의 타입 관계없이 같으면 false
		!==	: 데이터 타입도 일치해야 false
	6) 논리 : || && !
	7) 삼항 : ? :

6. 형변환
	: 데이터 타입을 변환시키는 작업

	# 자동형변환
	1) 숫자 + 문자 = 문자
	2) 불린 + 문자 = 문자
	3) 불린 + 숫자 = 숫자 	( true=1, false=0 )

		* 숫자 -> 문자 : 10+"" -> "10"

	# 강제형변환
	1) 문자 -> 숫자
		정수 : parseInt()
			Number()
		실수 : parseFloat()
			Number()
	2) 숫자 -> 문자 
		일반 문자 : String()
		16진수 : .toString(진수)
		실수문자 : .toFixed(소수점자리수)


7. 입력문 
	: 입력창을 통해서 사용자로부터 데이터를 입력받는 기능

	변수 = prompt("질문");
	변수 = prompt("질문","default답변");

	입력받은 값은 모두 문자타입으로 받아옴.


8. 제어문
	- 조건문 : if, switch
	- 반복문 : while, for,do while
	- 보조제어문: continue,break

9. 배열 array
	: 다양한 데이터 타입의 값 저장 가능
	
	1) 배열 생성 
		#1. 배열 객체 생성 
			var 참조변수명 = new Array();

			변수명[0] = 값;

		#2. 배열 객체 생성 + 초기값
			var 참조변수명 = new Array(값1, 값2, 값3, ......);

		#3. 배열 리터럴 생성 
			var 참조변수명 =[];		// 빈 배열
			var 참조변수명 = [값1, 값2, 값3, .....];


10. 함수
	1) 함수 function
		특정 기능을 하는 코드들을 묶어서 독립된 부품으로 만들어 
		재사용하고자 할때 호출하여 사용하는 기능

	2) 구조
		#정의 
		function 함수명 () {
			//실행할 코드들........
		}

		# 정의 (매개변수O , 리턴O)
		function 함수명(변수명, 변수명 , .....){
			// 실행코드들 ....
			return 값;
		}
		변수 = 함수명 (인자 , 인자 , .....);

	3) 스코프 
		: 변수또는 함수의 유효범위를 말함

		#1. 전역 변수 Global Variable
			선언위치 : 함수밖 {}밖
			사용범위 : 자바스크립트 전체 영역			

		#2. 지역 변수  Local Varialbe
			선언위치 : 함수 안
			사용범위 : 함수 안

		* 함수 내에서 동일 이름의 변수에 대한 우선 순위 : 지역> 전역

		#3. 전역 함수
			전역 변수와 동일
		#4. 지역함수 
			정의 위치 : 함수안 
			사용 범위 : 정의된 함수를 품고있는 함수만

	4) 변수에 함수 저장하기
		: 자바스크립트에서는 함수도 변수에 저장가능.
		변수에 함수를 저장하면 변수이름을 함수처럼 사용할 수 있다.

		var 변수명 = 함수명;
		->변수명();

	5) 매개변수 값으로 함수 사용하기
		: 매개변수도 변수이기 때문에 함수를 담을 수 있다.

	6) 리턴값으로 함수 사용하기
		: 함수는 어떤 값이든 리턴 가능.  즉 함수를 리턴할 수 있다.

11. 함수리터럴과 익명 함수
	1) 리터럴
		: 자바스크립트에서 데이터를 만드는 방법은 크게 두가지로,
		리터럴 방식과 객체 방식 두가지가 있다.

		타입	리터럴 방식 	객체
		-------------------------------------------------------------------
		숫자	var num =10;	var num = new Number(10);
		문자 	var name = "abc"	var name = new String ("abc");
		불린	var play = true;	var play = new Boolean (true);
		배열 	var arr = [1,2,3];	var arr = new Array(1,2,3);
		-------------------------------------------------------------------

	2) 함수 리터럴
		: 함수 이름을 주지않고 만들면 된다.
		
		#1. 일반적인 방법
			function hello (name){
				.........
			}

		#2. 리터럴
			var hello = function (name){
				.........
			}

		#3. 객체 방식 
			var hello = new Function("name"," 실행할 명령문들.... ");

	3) 익명 함수
		: 리터럴 방식의 함수를 익명함수라 한다.
		호이스팅 불가능
		일반함수 : 재사용 많이 할 경우
		익명함수 : 재사용 비중이 적거나 , 값처럼 정의해서 넘겨줘야할 경우
				
12.  자바스크립트 변수 선언 방식 
	: 변수 선언 방식에는 var / let / const 와 같이 3가지로 선언 가능 (ES6부터 가능)
		-> 변수 이름 충돌로 인하여.....

	ECMAScript ES6 = ECMAScript 표준의 6번째 에디션(2015)

	[  유효범위  ]
	* 블록스코프 : { } if, for, function (중괄호 안이냐 밖이냐)
	* 함수스코프 : 블록스코프 중 함수 범위를 갖는 스코프 (함수 안이냐 밖이냐)

	1) var	: 함수 스코프 : 같은 이름의 변수 재선언 가능. 값수정 가능 (문제점 유발 가능성 높음)
	2) let	: 블록 스코프 : 같은 이름의 변수 재선언 불가능. 값수정 가능 ( 일반 우리가 아는 변수)
	3) const 	: 블록 스코프 : 같은 이름의 변수 재선언 불가능. 값수정 불가능. -> 상수
				const는 선언과 동시에 값을 할당 해야함. 아니면 에러!!

13. 자바스크립트 객체
	: property 와 method로 이루어짐
	property : 프로퍼티(key) 와 프로퍼티(value) 로 구성
		프로퍼티(key)는 일반적으로 문자로 구성하고 값은 원하는 값
	method : 객체 안에 있는 함수를 가르킴

	HTML태그 - 속성(attribute)과 속성값을 가진다.
	CSS - 프로퍼티와 프로퍼티 값으로 이루어짐
	JS- 프로퍼티와 값, 그리고 메서드로 이루어짐

	1) 사용자 객체
		JS 객체 생서 방법 
		#1. 객체 리터럴 방식 : JS 객체 구분 기호 : { } 
			const 변수 = {
				프로퍼티명 : 값,
				프로퍼티명 : 값, ......
			};

			보통 객체 생성시, (문법은 아님)
			객체 자체의 주소값이 바뀌어야 하면 let으로 변수에 담고
			객체 자체의 주소값은 안바뀌고 안에만 바꾼다면 const 변수에 주로 담는다.

		#2. new Object() 로 생성하는 방식
			const 변수 = new Object();
			변수.age = 10;
			변수.name = "hello";

		#3. 생성자 함수로 생성하는 방식
			# 생성자 정의
			function 생성자명() {	// 생성자명은 첫글자 대문자로
				..........
			}

			# 객체 생성
			const 변수 = new 생성자명();
			변수.~~~

		#4. ES6 와 클래스
		
			class 클래스명 {		// 클래스명 첫글자 대문자로
				constructor(){	// 생성자
					......
				}
			}

			const 변수 = new 클래스명();


	2) 내장객체 

	3) 브라우저 객체 모델

	4) 문서 객체 모델
